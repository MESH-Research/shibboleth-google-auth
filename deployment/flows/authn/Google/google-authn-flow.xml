<!--
Copyright (C) 2017 Modern Language Association

Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
except in compliance with the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied. See the License for the specific language governing
permissions and limitations under the License.
-->
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow http://www.springframework.org/schema/webflow/spring-webflow.xsd"
      parent="authn.abstract, authn/conditions">

    <!-- Initialize the flow with the Google integration details
         and create an anti-forgery state token to be sent to
         Google and verified on return. Then use an external
         redirect view to send the browser to the Google authentication
         page.
         -->
    <action-state id="InitializeGoogleContext">
        <evaluate expression="InitializeGoogleContext" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="RedirectToGoogle" >
            <evaluate expression="opensamlProfileRequestContext" result="flowScope.profileRequestContext" />
            <evaluate expression="opensamlProfileRequestContext.getSubcontext(T(net.shibboleth.idp.authn.context.AuthenticationContext))" result="flowScope.authenticationContext" />
            <evaluate expression="authenticationContext.getSubcontext(T(org.mla.cbox.shibboleth.idp.authn.impl.GoogleContext))" result="flowScope.googleContext" />
            <evaluate expression="flowRequestContext.getExternalContext().getNativeRequest()" result="flowScope.request" />
        </transition>
    </action-state>

    <!-- Redirect the browser to the Google authentication page using a OAuth2 URL computed
         using the Google integration details stored in the GoogleContext along with the
         Spring WebFlow flowExecutionUrl. The query string includes the necessary Google
         integration details, the anti-forgery state token, and redirect URI to which the
         browser will be sent after Google authentication, and the necessary syntax to tell
         Spring WebFlow to transition to the next flow state.
         -->
    <view-state id="RedirectToGoogle" view="externalRedirect:#{googleContext.googleOauth2Url(request,flowExecutionUrl)}">
        <transition on="proceed" to="ProcessRedirectFromGoogle" />
    </view-state>

    <!-- Process the return from Google by consuming the one-time authorization code
         and then exchanging it using the client ID and secret for an ID token with
         claims about the user.
         -->
    <action-state id="ProcessRedirectFromGoogle">
        <evaluate expression="ProcessRedirectFromGoogle" />
        <evaluate expression="'proceed'" />

        <transition on="proceed" to="proceed" />
    </action-state>

    <bean-import resource="google-authn-beans.xml" />

</flow>
